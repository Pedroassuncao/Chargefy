{"ast":null,"code":"var _jsxFileName = \"/home/pedro/Documents/ULP/Chargefy_v2/web/src/views/CreatePce.tsx\";\nimport React, { useState } from 'react';\nimport { Map, Marker, TileLayer } from 'react-leaflet';\nimport { FiPlus } from 'react-icons/fi';\nimport '../styles/pages/create-pce.css';\nimport Sidebar from '../components/Sidebar';\nimport mapIcon from '../utils/mapIcon';\nimport api from '../services/api';\nimport { useHistory } from 'react-router-dom';\nexport default function CreatePce() {\n  const [userPosition, setUserPosition] = useState({\n    latitude: 0,\n    longitude: 0\n  });\n  navigator.geolocation.getCurrentPosition(position => {\n    setUserPosition({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    });\n  });\n  const history = useHistory();\n  const [position, setPosition] = useState({\n    latitude: 0,\n    longitude: 0\n  });\n  const [name, setName] = useState('');\n  const [about, setAbout] = useState('');\n  const [charger_type, setChargerType] = useState('');\n  const [opening_hours, setOpeningHours] = useState(''); // const [open_on_weekends, setOpenOnWeekends] = useState(true);\n\n  const [images, setImages] = useState([]);\n  const [previewImages, setPreviewImages] = useState([]);\n\n  function handleMapClick(event) {\n    const {\n      lat,\n      lng\n    } = event.latlng;\n    setPosition({\n      latitude: lat,\n      longitude: lng\n    });\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    const {\n      latitude,\n      longitude\n    } = position;\n    const data = new FormData();\n    data.append('name', name);\n    data.append('latitude', String(latitude));\n    data.append('longitude', String(longitude));\n    data.append('about', about);\n    data.append('charger_type', charger_type);\n    data.append('opening_hours', opening_hours); // data.append('open_on_weekends', String(open_on_weekends));\n\n    images.forEach(image => {\n      data.append('images', image);\n    });\n    await api.post('/pces', data);\n    history.push('/success');\n  }\n\n  function handleSelectImages(event) {\n    if (!event.target.files) {\n      return;\n    }\n\n    const selectedImages = Array.from(event.target.files);\n    setImages(selectedImages);\n    const selectedImagesPreview = selectedImages.map(image => {\n      return URL.createObjectURL(image);\n    });\n    setPreviewImages(selectedImagesPreview);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"page-create-pce\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Sidebar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"create-pce-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Inserir dados do Posto\"), /*#__PURE__*/React.createElement(Map, {\n    center: [userPosition.latitude, userPosition.longitude],\n    style: {\n      width: '100%',\n      height: 280\n    },\n    zoom: 13,\n    onClick: handleMapClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer // url = \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n  , {\n    url: `https://api.mapbox.com/styles/v1/mapbox/outdoors-v11/tiles/256/{z}/{x}/{y}@2x?access_token=${process.env.REACT_APP_MAPBOX_TOKEN}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }), position.latitude !== 0 && /*#__PURE__*/React.createElement(Marker, {\n    interactive: false,\n    icon: mapIcon,\n    position: [position.latitude, position.longitude],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, \"Nome\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"name\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"about\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, \"Sobre \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 23\n    }\n  }, \"M\\xE1ximo de 300 caracteres\")), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"name\",\n    maxLength: 300,\n    value: about,\n    onChange: e => setAbout(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"images\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }, \"Fotos\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"images-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, previewImages.map(image => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: image,\n      src: image,\n      alt: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 26\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"image[]\",\n    className: \"new-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FiPlus, {\n    size: 24,\n    color: \"#15D691\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"input\", {\n    multiple: true,\n    onChange: handleSelectImages,\n    type: \"file\",\n    id: \"image[]\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, \"Detalhes do carregador\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, \"Tipo de carregador\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"instructions\",\n    value: charger_type,\n    onChange: e => setChargerType(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"opening_hours\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  }, \"Hor\\xE1rio\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"opening_hours\",\n    value: opening_hours,\n    onChange: e => setOpeningHours(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"confirm-button\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, \"Confirmar\"))));\n} // return `https://a.tile.openstreetmap.org/${z}/${x}/${y}.png`;","map":{"version":3,"sources":["/home/pedro/Documents/ULP/Chargefy_v2/web/src/views/CreatePce.tsx"],"names":["React","useState","Map","Marker","TileLayer","FiPlus","Sidebar","mapIcon","api","useHistory","CreatePce","userPosition","setUserPosition","latitude","longitude","navigator","geolocation","getCurrentPosition","position","coords","history","setPosition","name","setName","about","setAbout","charger_type","setChargerType","opening_hours","setOpeningHours","images","setImages","previewImages","setPreviewImages","handleMapClick","event","lat","lng","latlng","handleSubmit","preventDefault","data","FormData","append","String","forEach","image","post","push","handleSelectImages","target","files","selectedImages","Array","from","selectedImagesPreview","map","URL","createObjectURL","width","height","process","env","REACT_APP_MAPBOX_TOKEN","e","value"],"mappings":"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","sourcesContent":["import React, { FormEvent, useState, ChangeEvent } from 'react';\nimport { Map, Marker, TileLayer } from 'react-leaflet';\nimport { LeafletMouseEvent } from 'leaflet';\n\nimport { FiPlus } from 'react-icons/fi';\n\nimport '../styles/pages/create-pce.css';\nimport Sidebar from '../components/Sidebar';\nimport mapIcon from '../utils/mapIcon';\nimport api from '../services/api';\nimport { useHistory } from 'react-router-dom';\n\nexport default function CreatePce() {\n  const [userPosition, setUserPosition] = useState({\n    latitude: 0,\n    longitude: 0,\n  });\n\n  navigator.geolocation.getCurrentPosition((position) => {\n    setUserPosition({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude,\n    });\n  });\n\n  const history = useHistory();\n\n  const [position, setPosition] = useState({ latitude: 0, longitude: 0 });\n\n  const [name, setName] = useState('');\n  const [about, setAbout] = useState('');\n  const [charger_type, setChargerType] = useState('');\n  const [opening_hours, setOpeningHours] = useState('');\n  // const [open_on_weekends, setOpenOnWeekends] = useState(true);\n  const [images, setImages] = useState<File[]>([]);\n  const [previewImages, setPreviewImages] = useState<string[]>([]);\n\n  function handleMapClick(event: LeafletMouseEvent) {\n    const { lat, lng } = event.latlng;\n    setPosition({\n      latitude: lat,\n      longitude: lng,\n    });\n  }\n\n  async function handleSubmit(event: FormEvent) {\n    event.preventDefault();\n\n    const { latitude, longitude } = position;\n\n    const data = new FormData();\n\n    data.append('name', name);\n    data.append('latitude', String(latitude));\n    data.append('longitude', String(longitude));\n    data.append('about', about);\n    data.append('charger_type', charger_type);\n    data.append('opening_hours', opening_hours);\n    // data.append('open_on_weekends', String(open_on_weekends));\n\n    images.forEach((image) => {\n      data.append('images', image);\n    });\n\n    await api.post('/pces', data);\n\n    history.push('/success');\n  }\n\n  function handleSelectImages(event: ChangeEvent<HTMLInputElement>) {\n    if (!event.target.files) {\n      return;\n    }\n    const selectedImages = Array.from(event.target.files);\n    setImages(selectedImages);\n\n    const selectedImagesPreview = selectedImages.map((image) => {\n      return URL.createObjectURL(image);\n    });\n\n    setPreviewImages(selectedImagesPreview);\n  }\n\n  return (\n    <div id=\"page-create-pce\">\n      <Sidebar />\n      <main>\n        <form onSubmit={handleSubmit} className=\"create-pce-form\">\n          <fieldset>\n            <legend>Inserir dados do Posto</legend>\n\n            <Map\n              center={[userPosition.latitude, userPosition.longitude]}\n              style={{ width: '100%', height: 280 }}\n              zoom={13}\n              onClick={handleMapClick}\n            >\n              <TileLayer\n              // url = \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                 url={`https://api.mapbox.com/styles/v1/mapbox/outdoors-v11/tiles/256/{z}/{x}/{y}@2x?access_token=${process.env.REACT_APP_MAPBOX_TOKEN}`}\n              />\n\n              {position.latitude !== 0 && (\n                <Marker\n                  interactive={false}\n                  icon={mapIcon}\n                  position={[position.latitude, position.longitude]}\n                />\n              )}\n            </Map>\n\n            <div className=\"input-block\">\n              <label htmlFor=\"name\">Nome</label>\n              <input\n                id=\"name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n            </div>\n\n            <div className=\"input-block\">\n              <label htmlFor=\"about\">\n                Sobre <span>Máximo de 300 caracteres</span>\n              </label>\n              <textarea\n                id=\"name\"\n                maxLength={300}\n                value={about}\n                onChange={(e) => setAbout(e.target.value)}\n              />\n            </div>\n\n            <div className=\"input-block\">\n              <label htmlFor=\"images\">Fotos</label>\n\n              <div className=\"images-container\">\n                {previewImages.map((image) => {\n                  return <img key={image} src={image} alt={name} />;\n                })}\n                <label htmlFor=\"image[]\" className=\"new-image\">\n                  <FiPlus size={24} color=\"#15D691\" />\n                </label>\n              </div>\n\n              <input\n                multiple\n                onChange={handleSelectImages}\n                type=\"file\"\n                id=\"image[]\"\n              />\n            </div>\n          </fieldset>\n\n          <fieldset>\n            <legend>Detalhes do carregador</legend>\n\n            <div className=\"input-block\">\n              <label htmlFor=\"instructions\">Tipo de carregador</label>\n              <textarea\n                id=\"instructions\"\n                value={charger_type}\n                onChange={(e) => setChargerType(e.target.value)}\n              />\n            </div>\n\n            <div className=\"input-block\">\n              <label htmlFor=\"opening_hours\">Horário</label>\n              <input\n                id=\"opening_hours\"\n                value={opening_hours}\n                onChange={(e) => setOpeningHours(e.target.value)}\n              />\n            </div>\n\n            {/* <div className=\"input-block\">\n              <label htmlFor=\"open_on_weekends\">Atende fim de semana</label>\n\n              <div className=\"button-select\">\n                <button\n                  type=\"button\"\n                  className={open_on_weekends ? 'active' : ''}\n                  onClick={() => setOpenOnWeekends(true)}\n                >\n                  Sim\n                </button>\n                <button\n                  type=\"button\"\n                  className={!open_on_weekends ? 'disactive' : ''}\n                  onClick={() => setOpenOnWeekends(false)}\n                >\n                  Não\n                </button>\n              </div>\n            </div> */}\n          </fieldset>\n\n          <button className=\"confirm-button\" type=\"submit\">\n            Confirmar\n          </button>\n        </form>\n      </main>\n    </div>\n  );\n}\n\n// return `https://a.tile.openstreetmap.org/${z}/${x}/${y}.png`;\n"]},"metadata":{},"sourceType":"module"}